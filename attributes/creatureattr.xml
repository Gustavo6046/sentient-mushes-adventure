<?xml version="1.0"?>
<default>
    <flag name="living" />
    <attribute key="dead" value="False" />
    
    <static name="speed" value="0.4" />
    <static name="moveSpeed" value="0.5" />
    <static name="hostility" value="0" />
    <static name="courage" value="1" />
    <static name="sociality" value="5" />
    <static name="leadership" value="0" />
    <static name="dangerousness" value="15" /> <!-- uses health scale -->
    <static name="flammable" value="True" />
    
    <static name="specialMoveFunc" value="None" />
    <static name="rangedAttackFunc" value="None" />
    <static name="meleeAttackFunc" value="None" />
    
    <static name="isPlayer" value="False" />

    <attribute key="health" value="100" /> # default health amount
    <attribute key="speedModifier" value="1" />
    <attribute key="mush" value="False" />
    <attribute key="humor" value="0.5" /> <!-- open scale, but general between 0 to 1 -->
    <attribute key="inventory" value="{}" />
    <attribute key="accuracy" value="1.0" />
    <attribute key="immune" value="5" /> <!-- Rehermann scale :) -->
    
    <attribute key="burning" value="False" />
    
    <declare key="instigator" />
    <declare key="burnInstigator" />    
    <declare key="target" />
    <declare key="destination" />
    
    <attribute key="friends" value="[]" />
    
    <item name="raw steak">
        <flag name="food" />
    </item>
    
    <function name="creature_tick">
        import random
        
        def weighted_random(l):
            if not isinstance(l, list):
                return None
            
            tot = sum(map(lambda x: x[1], l), 0)
            
            if tot == 0:
                return None
            
            r = random.uniform(0, tot)
            t = .0
            
            for d in l:
                t += d[1]
                
                if r &lt; t:
                    return d[0]
                
            print(r, t)    
            return None # something weird happened!
        
        def creature_tick(entity):
            # print('[DEBUG]', entity, 'creature tick.')
            # print('[DEBUG] * Life check...')
        
            if entity['dead']:
                entity.reinit()
                world.entities.pop(entity.index) # rotten or perished
                return
                
            # print('[DEBUG]   Not dead.')
        
            if entity['burning'] and random.random() &lt;= 0.5:
                dmg = random.uniform(2, 9)
                entity.world.broadcast(1, "Ouch! ", entity, " is taking burn damage!", place=entity.place)
                entity['instigator'] = entity['burnInstigator']
                entity.call("take_damage", dmg)
                
            if entity['burning'] and random.random() &lt;= 0.15:
                entity['burning'] = False
                entity.world.broadcast(1, entity, "'s flames have extinguished naturally.", place=entity.place)
                
            # print('[DEBUG] * Player check....')
                
            if entity['isPlayer']:
                return
                
            # print('[DEBUG]   Not player.')
                
            if entity['destination'] and entity['destination'] != entity.place and not entity['target']:
                entity.call('pathmove', entity['destination'])
                
            elif entity['target'] and entity['specialMoveFunc'] and (entity['dangerousness'] + entity['health']) * entity['courage'] &gt;= (entity.world.from_id(entity['target'])['dangerousness'] + entity.world.from_id(entity['target'])['health']) * entity.world.from_id(entity['target'])['courage'] / 10.0 and random.random() &lt;= 0.5:
                entity['destination'] = entity.world.from_id(entity['target']).place
                entity.call(entity['specialMoveFunc'])
                
            else:
                if entity['target'] and entity.world.from_id(entity['target'])['dead']:
                    entity['target'] = None
            
                # Hostility.
                if not entity['target']:
                    strangers = tuple(filter(lambda e: ((e.type.id != entity.type.id) or (e['mush'] != entity['mush'] and entity['mush']) and ((entity['dangerousness'] + entity['health']) * entity['courage'] / 10.0 &gt;= (e['dangerousness'] + e['health']) * e['courage'] / 10.0)) and e.place == entity.place, entity.world.all_in_place(entity.place)))
                    
                    if random.random() * 20 &lt;= entity['hostility'] + 10 - entity['humor'] * 10 and len(strangers) > 0:
                        entity['target'] = random.choice(strangers).id
                        entity.world.broadcast((2.5 if entity.world.from_id(entity['target'])['isPlayer'] else 1), entity, ' suddenly turns to attack ', entity.world.from_id(entity['target']), '!', place=entity.place)
                        entity.call('pick_attack')
                    
                ## Sociality.
                friends = tuple(filter(lambda e: e.type.name == entity.type.name and e.place == entity.place, entity.world.all_in_place(entity.place)))
                
                if entity['mush']:
                    # Once mush, always mush ;)
                    friends = tuple(set(friends) | set(filter(lambda e: e['mush'] and e.place == entity.place, entity.world.all_in_place(entity.place))))
                
                friends = tuple(filter(lambda f: f.id not in entity['friends'] and entity.id != f.id and (not entity['mush'] or f['mush']), friends))
                
                if random.random() * 10 &lt;= entity['sociality'] * entity['humor'] and len(friends) > 0:
                    f = random.choice(friends)
                    fl = entity['friends']
                    fl.append(f.id)
                    entity['friends'] = fl
                    entity.world.broadcast((2 if f['isPlayer'] else 0), entity, " made a new friend: ", f, "!", place=entity.place)
                    
                # Following friends.
                if len(entity['friends']) > 0 and random.random() * 10 &lt;= entity['humor'] * 8 + 2:
                    to_follow = weighted_random(list({e: e['leadership'] for e in map(lambda e: entity.world.from_id(e), entity['friends'])}.items()))
                    
                    if to_follow:
                        entity.call('pathmove', to_follow.place)
                        
                # Sharing battles with friends.
                if not entity['target'] and entity['friends']:
                    for f_ in entity['friends']:
                        f = entity.world.from_id(f_)
                        
                        if f['target'] and not entity.world.from_id(f['target'])['dead'] and random.random() &lt;= 0.1:
                            entity.world.broadcast((2 if f['isPlayer'] or f.world.from_id(f['target'])['isPlayer'] else 0), entity, " decided to help his friend ", f, " in its battle aggainst ", f.world.from_id(f['target']), '!', place=entity.place)
                            entity['target'] = f['target']
                            break
    </function>
    
    <function name="flee">
        import random
    
        def flee(entity, other=None):
            if not entity['target'] or entity['dead']:
                return
                
            targ = entity.world.from_id(entity['target'])
                
            possib = set()
            
            for p in entity.world.paths:
                if entity.place in p:
                    possib |= p
                    
            possib -= {entity.place, targ.place}
            
            if len(possib) > 0:
                place = random.choice(tuple(possib))
                entity.world.broadcast(0, entity, " fled from ", targ, " towards ", place, "!", place=entity.place)
                entity.call('move', place)
                
    </function>
    
    <function name="pick_attack">
        import random
    
        def pick_attack(entity):
            if not entity['target'] or entity['dead'] or (entity.world.from_id(entity['target']).place != entity.place):
                return
                
            if (entity['dangerousness'] + entity['health']) * entity['courage'] / 10.0 &lt; (entity.world.from_id(entity['target'])['dangerousness'] + entity.world.from_id(entity['target'])['health']) * entity.world.from_id(entity['target'])['courage'] / 10.0:
                entity.call('flee')
            
            else:
                # print("{}  r={}  m={}  v={}".format(str(entity), entity['rangedAttackFunc'], entity['meleeAttackFunc'], entity.variant['attr']))
            
                if entity.world.from_id(entity['target'])['size'] &lt;= entity['size'] and entity['rangedAttackFunc'] and random.random() &lt;= 0.7:
                    entity.call(entity['rangedAttackFunc'])
                    
                elif entity['meleeAttackFunc']:
                    entity.call(entity['meleeAttackFunc'])
                    
                elif random.random() &lt;= entity['courage'] / 10:
                    entity.call('flee')
    </function>
    
    <function name="move">
        import random
    
        def move(entity, place, bPrint=False):
            if place == entity.place:
                return 0
                
            possib = set() 
            
            for path in entity.world.paths:
                if entity.place in path:
                    possib |= path
                    
            if place in possib:
                if random.random() &lt;= entity['moveSpeed'] * entity['speedModifier']:
                    if bPrint:
                        entity.world.broadcast((3 if entity['isPlayer'] else 0), entity, " has just moved to ", place, "!", place=place)
                        return 2
                        
                    entity.set_place(place)
                    entity.event('movement')
                    
                elif bPrint:
                    entity.world.broadcast((3 if entity['isPlayer'] else 0), entity, " failed to move to ", place, " in one turn!", place=entity.place)
                    return 1
                    
            return 0
    </function>
    
    <function name="init">
        def init(entity):
            entity['spawnHealth'] = entity['health']
    </function>
    
    <function name="pathmove">
        import random
    
        def neighbor_paths(place, world):
            res = set()
        
            for p in world.paths:
                if place in p:
                    res |= p
                    
            res -= {place}
            
            return res
    
        def pathmove(entity, navdest, print=False):
            if (entity['dead']) or (entity.place == navdest):
                return 0
        
            # Super basic pathfinder.
            open = [entity.place]
            closed = set()
            come_from = { entity.place: None }
            p = None
            
            while len(open) > 0:
                cur = open.pop()
            
                for n in neighbor_paths(cur, entity.world):
                    if n in closed:
                        continue
                
                    come_from[n] = cur
                
                    if navdest == n:
                        p = n
                        break
                    
                    open.append(n)
                    
                closed.add(cur)
                    
            if p is None:
                entity.world.broadcast((3 if entity['isPlayer'] else 0), entity, " can't find a path to ", navdest, "!", place=entity.place)
                return 0
                
            path = []
            
            c = navdest
            while c != entity.place:
                # print(c, entity.place)
                path.append(c)
                
                if c not in come_from:
                    entity.world.broadcast((3 if entity['isPlayer'] else 0), entity, " can't find a path to ", navdest, "!", place=entity.place)
                    return 0
                    
                c = come_from[c]
                
            res = entity.call('move', path[0], print)
                
            # if res:
            #     entity.world.broadcast((3 if entity['isPlayer'] else 0), entity, " wants to go to ", navdest, ("; just went through {}!".format(path[0]) if path[0] != navdest else "!"), place=path[0])
                
            if res == 1:
                if path[0] == navdest:
                    entity.world.broadcast((3 if entity['isPlayer'] else 0), entity, " failed to move to ", path[0], "!", place=path[0])
                
                else:
                    entity.world.broadcast((3 if entity['isPlayer'] else 0), entity, " failed to move to ", path[0], " while trying to reach ", navdest, "!", place=path[0])
                
            return res
    </function>
    
    <function name="tick">
        def tick(entity):
            entity.call('creature_tick')
    </function>
    
    <function name="on_death">
        def on_death(entity):
            print("Something died!")]
    </function>
        
    <function name="on_kill">
        def on_kill(entity, other):
            pass
    </function>
    
    <function name="infect">
        import random
    
        def infect(entity, player, target):
            if entity['dead'] or not target or not entity['mush'] or target['mush'] or entity.place != target.place or target['brainless']:
                return False
                
            dmg = random.uniform(0.5, 3.25) * target['spawnHealth'] / target['health'] # wounds ease it
            target['immune'] -= dmg
            
            if target['immune'] &lt;= 0:
                target['mush'] = True
                
                # Reset social attributes.
                target['instigator'] = None
                target['target'] = None
                target['friends'] = []
                
                target['humor'] += 0.2
                entity['humor'] += 0.35
                
                entity.world.broadcast(2, entity, " has infected ", target, "! Now it is mush!", place=entity.place)
                
            else:
                entity.world.broadcast(2, entity, " has attempted to infect ", target, ", dealing ", dmg, " immunologic system damage!", place=entity.place)
                
            return True
    </function>
    
    <function name="attack">
        import random
    
        def attack(entity, other, damage):
            if entity['dead'] or not other or (entity.place != other.place):
                return False
        
            if random.random() * 0.8 + min(1, max(entity['humor'], 0)) * entity['accuracy'] &lt;= other['speed']:
                entity.world.broadcast(2, entity, " tried to attack ", other, "! It missed!", place=entity.place)
                entity['humor'] -= 0.08
                return False
                
            other['instigator'] = entity.id
            entity.world.broadcast(2, entity, " attacks ", other, "!", place=entity.place)
            other.call('take_damage', damage)
            
            entity.event('attack')
            
            return True
    </function>
    
    <function name="mutilated">
        def mutilated(entity):
            entity['accuracy'] /= 3
            entity.world.broadcast((3 if entity['isPlayer'] else 2), entity, " got mutilated! Now its chance of missing an attack is far higher!", place=entity.place)
    </function>
    
    <function name="take_damage">
        def take_damage(entity, damage):
            if entity['dead']:
                return
        
            for i in entity['inventory'].keys():
                if entity['inventory'].get(i) &gt; 0 and 'modify_damage' in entity.world.item_type(i).functions:
                    damage = entity.world.item_type(i).functions['modify_damage'](entity, world, damage)
                    
            entity['health'] = entity['health'] - damage

            if entity['health'] &lt;= 0:
                if entity['instigator']:
                    entity.world.from_id(entity['instigator'])['humor'] = entity.world.from_id(entity['instigator'])['humor'] + 0.02 * entity.world.from_id(entity['instigator'])['hostility'] - 5
                
                    if entity.world.from_id(entity['instigator'])['obituary']:
                        entity.world.broadcast(2, '* ' + entity.world.from_id(entity['instigator'])['obituary'].format(killer=entity.world.from_id(entity['instigator']), victim=entity), place=entity.place)
                        
                    else:
                         entity.world.broadcast(2, '* ', entity, " took ", damage, " damage from ", entity.world.from_id(entity['instigator']), " and died!", place=entity.place)
                         
                    entity.world.from_id(entity['instigator']).call('on_kill', entity)
            
                else:
                    entity.world.broadcast(2, '* ', entity, " took ", damage, " damage and died!", place=entity.place)
                    
                entity.call('on_death')
                entity['dead'] = True
                entity.event('death')
            
            else:
                entity['humor'] -= damage / entity['health'] / 1.5
            
                if entity['instigator']:
                    entity['humor'] -= 7
                
                    entity.world.broadcast(2, entity, " took ", damage, " damage!", place=entity.place)
                    
                    if not entity['target'] or (entity.world.from_id(entity['instigator'])['dangerousness'] + entity.world.from_id(entity['instigator'])['health'] &gt; entity.world.from_id(entity['target'])['dangerousness'] + entity.world.from_id(entity['target'])['health']):
                        entity['target'] = entity['instigator']
                        
                    entity['instigator'] = None
                    
                else:
                    entity.world.broadcast((2 if entity['isPlayer'] else 1), entity, " took ", damage, " damage!", place=entity.place)
            
    </function>
    
    <function name="heal">
        def heal(entity, other, amount):
            if entity['dead']:
                return
        
            if entity.place == other.place:
                if entity.id == other.id:
                    entity.world.broadcast((2 if entity['isPlayer'] else 0), entity, " is healing itself by ", amount, " hitpoints!", place=entity.place)
                
                else:
                    entity.world.broadcast((2 if entity['isPlayer'] else 1), entity, " is healing ", other, " by ", amount, " hitpoints!", place=entity.place)
                    
                other['health'] = other['health'] + amount
    </function>
</default>